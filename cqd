#!/usr/bin/env python
import fcntl
import os
import os.path as path
import shlex
import signal
import subprocess as sub
import sys
import threading

class Fucked(Exception): pass

def ensure(condition, msg):
    if not condition:
        raise Fucked(msg)


def log(msg):
    sys.stderr.write(msg + '\n')


def warn(msg):
    log('warning: ' + msg)


def cqfile(*args):
    return path.join(cqdir, *args)


def wakeup():
    event.set()


def halt():
    global stop_flag
    stop_flag = True
    wakeup()


def lock(fd): fcntl.flock(fd, fcntl.LOCK_EX)
def unlock(fd): fcntl.flock(fd, fcntl.LOCK_UN)


def popline(filename):
    with open(filename, 'r') as readf:
        line = readf.readline()
        with open(filename, 'w') as writef:
            writef.write(readf.read())
        return line[:-1]        # remove trailing newline


def run_job(job_dir):
    run_path = path.join(job_dir, 'run')
    pid_path = path.join(job_dir, 'pid')
    lock_path = path.join(job_dir, 'lock')

    if 'run' in config:
        cmd = [x if x != '%s' else run_path for x in config['run']]
    else:
        cmd = run_path

    with open('/dev/null', 'w') as nullfd:
        child = sub.Popen(cmd,
                          stdin=nullfd, stdout=nullfd, stderr=None,
                          close_fds=True)

        # Write the pid to the pidfile
        log('spawned child %d running %s' % (child.pid, run_path))

        with open(pid_path, 'w') as pidfile:
            pidfile.write("%d\n" % child.pid)

        # Wait for the child to die
        status = child.wait()
        log("child %d succeeded" % child.pid
            if not status else
            "child %d failed with status %d" % (child.pid, status))

        # Clean up after ourselves.
        status = sub.Popen(['rm', '-r', '--', job_dir]).wait()
        ensure(not status, "could not remove job directory %s" % job_dir)


def handle_job():
    lock(lock_file)
    jobfd = None
    try:
        queue_path = cqfile('queue')
        # If the file is empty, do nothing.
        if not (path.exists(queue_path) and os.stat(queue_path).st_size):
            return False

        # Take a job from the queue and make it current
        job = popline(queue_path)
        job_dir = cqfile('jobs', job)
        with open(cqfile('jobs', job, 'lock')) as job_lock_file:
            lock(job_lock_file)
            try:
                os.rename(job_dir, cqfile('current'))
            finally:
                unlock(job_lock_file)
    finally:
        unlock(lock_file)

    # Run the job
    run_job(cqfile('current'))
    return True


def event_loop():
    while not stop_flag:
        event.wait()
        event.clear()
        while handle_job() and not stop_flag:
            continue

    # Exit gracefully
    log("exiting")
    os.remove(cqfile('cqd.pid'))


def parse_config(f):
    conf = {}
    for line in f:
        words = shlex.split(line, '#')
        if not words: continue
        conf[words[0]] = words[1:]
    return conf


def reconfig():
    global config
    cfile = cqfile('config')

    if path.exists(cfile):
        with open(cfile, 'r') as cf:
            config = parse_config(cf)
        log('loaded config file')
    else:
        log('no config file to load')


def main(argv):
    global cqdir, lock_file, stop_flag, event

    try: cqdir = os.environ["CQDIR"]
    except KeyError:
        raise UserError("CQDIR not set")

    # TODO: canonicalize cqdir here.

    ensure(path.isdir(cqdir), "CQDIR is not a dir")
    ensure(os.access(cqdir, os.F_OK | os.R_OK | os.W_OK | os.X_OK),
           "CQDIR does not have acceptable permissions")

    # Set up global state
    lock_file = open(cqfile('lock'), 'w')
    event = threading.Event()
    stop_flag = False
    reconfig()

    # Register signal handlers for USR1, USR2, HUP
    signal.signal(signal.SIGALRM, lambda signo, frame: wakeup())
    signal.signal(signal.SIGINT, lambda signo, frame: halt())
    signal.signal(signal.SIGHUP, lambda signo, frame: reconfig())

    # Run the event loop
    event.set()
    threading.Thread(target=event_loop).start()

    # Wait for signals.
    while not stop_flag:
        signal.pause()


if __name__ == "__main__":
    try:
        main(sys.argv)
    except Fucked, e:
        log(e)
        exit(1)
    except:
        # Something weird happened, so exit.
        halt()
        raise
