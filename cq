#!/bin/zsh

integer lockfd

# Utility functions
die() { echo $@ >&2; exit 1 }

init() {
    # Determine the control directory.
    [ -n $CQDIR ] || die 'No CQDIR specified'
    [ -d $CQDIR ] || die 'CQDIR is not a directory'
    [ -x $CQDIR ] || die 'CQDIR not searchable'
    [ -w $CQDIR ] || die 'CQDIR not writable'

    # Open the queue file
    exec {lockfd}>$CQDIR/lock
}

cqdpid() { cat $CQDIR/cqd.pid 2>/dev/null }

lock() { flock -x $lockfd }
unlock() { flock -u $lockfd }

notify-cqd() {
    local pid=$(cqdpid)
    [ -n "$pid" ] && kill -USR1 $pid
    return
}

newjobid() {
    comm -13 <(ls $CQDIR/jobs | egrep '^[0-9]+$' | sort -n) \
             <(for ((i=0; ; ++i)) echo $i) \
        2>/dev/null | head -1 2>/dev/null
}

jobsummary() {
    local jobdir=$1
    local desc="$(head -n 2 $jobdir/run | tail -n 1)"
    (( $(wc -l < ${jobdir}/run) > 2 )) && desc+='...'
    echo $desc
}

jobdesc() {
    local jobid=$1
    local jobdir=${2:-$CQDIR/jobs/$jobid}
    local jobfd
    exec {jobfd}>$jobdir/lock
    flock -s $jobfd

    echo "${jobid}\t$(jobsummary $jobdir)"

    # not sure unlocking is necessary, since we're closing the fd anyway
    flock -u $jobfd
    exec {jobfd}>&-
}

jobdescs() { while read jobid; do jobdesc $jobid; done }

# Commands
cq-nop() {}

cq-create() {
    # Set up a new control directory.
    CQDIR=${1:-${CQDIR:-$(mktemp -d --tmpdir cq.XXXXXXXXXX)}}
    mkdir -p $CQDIR || die "cannot make control directory"
    mkdir -p $CQDIR/jobs || die "cannot make job directory"
    touch $CQDIR/queue || die "cannot make job queue"

    echo "export CQDIR='$CQDIR'"
}

cq-destroy() {
    [ -f $CQDIR/cqd.pid ] && die 'cqd still running!'
    rm -r $CQDIR
    echo "unset CQDIR"
}

cq-hup() {
    notify-cqd || { echo "cqd not running" >&2; return 1 }
}

cq-start() {
    export CQDIR
    cqd $@ >$CQDIR/log 2>&1 &
    echo $! > $CQDIR/cqd.pid
}

cq-stop() {
    local pid=$(cqdpid)
    [ -n "$pid" ] || die "Could not get pid of cqd daemon"
    kill $pid || die "Could not kill cqd daemon"
    rm $CQDIR/cqd.pid
}

cq-status() {
    echo "CQDIR is $CQDIR"
    lock

    local pid=$(cqdpid)
    if [ -n "$pid" ]; then
        if [ -d /proc/$pid ]
        then echo "cqd is running with pid $pid"
        else echo "cqd ostensibly has pid $pid, but is not running!"
        fi
    else echo "cqd is not running"
    fi

    [ -d $CQDIR/current ] && echo "current job: $(jobsummary $CQDIR/current)"

    unlock
}

cq-view()  {
    # No locking can save the fundamental issue here - the current job can end
    # at any time. So we don't do any locking.

    [ -f $CQDIR/current/pid ] || die "No current job to view."
    local pid=$(cat $CQDIR/current/pid)
    screen -r $pid
}

cq-list() {
    tmp=$(mktemp)
    lock

    # Determine which jobs aren't in the queue file
    comm -23 <(ls $CQDIR/jobs | sort -n) <(sort -n $CQDIR/queue) > $tmp

    {
        echo 'JOBID\tSUMMARY'
        # Current job.
        [ -d $CQDIR/current ] && jobdesc '*' $CQDIR/current
        # Jobs in the queue.
        cat $CQDIR/queue | jobdescs
        # Jobs not in the queue, if any exist.
        [ -s $tmp ] && { echo '--'; jobdescs < $tmp }
    } | column -s $'\t' -t

    unlock
    rm $tmp
}

cq-edit-queue() {
    tmpfile=$(mktemp)

    lock

    cp $CQDIR/queue $tmpfile

    if $EDITOR $tmpfile; then
        cp $tmpfile $CQDIR/queue
        notify-cqd
    else
        echo "editor failed, not modifying queue" >&2
        failed=1
    fi

    unlock

    rm $tmpfile
    return ${failed:-0}
}

cq-add() {
    # Parse options.
    while getopts 'en:' option ${@}; do
        case $option in
            e) edit=true;;
            n) jobid=$OPTARG;;
            *) die "Unrecognized cq-add option: ${option}";;
        esac
    done
    set -- ${@[$OPTIND,-1]}

    lock

    # Create a directory for our job.
    [ -z $jobid ] && jobid=$(newjobid)
    jobdir=$CQDIR/jobs/$jobid
    mkdir $jobdir 2>/dev/null || die "job already exists: $jobid"
    # lock handoff to avoid exposing our job directory in an uninitialized state
    exec {jobfd}>$jobdir/lock
    flock -x $jobfd
    unlock

    # Initialize our job's directory.
    runfile=$jobdir/run
    cat >$runfile <<EOF
#!/bin/sh
$@
EOF
    (( $? )) && die "failed to create job runfile"
    chmod +x $runfile || die "cannot make job runfile executable"

    # Edit the job if the user requested it.
    if [ -n "$edit" ] && ! $EDITOR $runfile; then
        echo "editor failed, removing job $jobid" >&2
        lock
        rm -r $jobdir || echo "could not remove job $jobid" >&2
        exit 1
    fi

    # Unlock job's directory.
    flock -u $jobfd
    exec {jobfd}>&-

    # Add to queue.
    lock
    echo $jobid >> $CQDIR/queue
    notify-cqd
    unlock
}

cq-remove() {
    lock

    jobid=$1
    jobdir=$CQDIR/jobs/$jobid
    [ -d $jobdir ] || die "No such job: ${jobid}"

    # Remove from queue
    tmp=$(mktemp)
    cp $CQDIR/queue $tmp
    fgrep -x -v $jobid $tmp > $CQDIR/queue
    notify-cqd

    rm -r $jobdir || {
        echo "Cannot remove job dir for ${jobid}"
        echo "Attempting to restore job queue..."
        if cp $tmp $CQDIR/queue
        then echo "Job queue restored."
        else echo 'Could not restore job queue!'
        fi
        exit 1
    } >&2

    unlock
}


# Determine command & global options and run command
while getopts 'd:' option ${@}; do
    case $option in
        d) CQDIR=$OPTARG;;
        *) die "Unrecognized option: ${option}";;
    esac
    set -- ${@[$OPTIND,-1]}
done

cmd=$1; shift

case $cmd in
    add|create|destroy|edit|edit-queue|hup|list|remove|start|status|stop|view)
        # command was fully specified, do nothing
        ;;

    # Aliases go here.
    a) cmd=add;;
    c) cmd=create;;
    e) cmd=edit;;
    eq) cmd=edit-queue;;
    l) cmd=list;;
    r|rem) cmd=remove;;
    s) cmd=status;;
    v) cmd=view;;

    *) echo "unrecognized command: $cmd"; exit 1;;
esac

[ $cmd != create ] && init
cq-$cmd $@
exit $?
